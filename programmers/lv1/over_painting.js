// 덧칠하기

function solution(n, m, section) {
  let answer = 1;
  let endOfroller = section[0] + m - 1;

  for (const position of section) {
      if (position > endOfroller) {
          answer += 1;
          endOfroller = position + m - 1;
      }
  }

  return answer;
}

// n을 초과한 구역은 칠할 수 없다는 규칙이 있어서 예외 처리에 고민이 있었다.
  // 내 로직은 section을 순회하면서 롤러 범위에 포함되는지 안되는지 체크하기 때문에, 끝 영역에서 롤러를 칠했을 때 최대 범위를 초과하는 경우 문제가 생길 수 있다고 판단했다.
  // 하지만 덧칠할 수 있다는 조건과 m(칠하는 너비) <= n(전체 구역)이기 때문에 따로 예외처리 없이 계산해줘도 아무 문제가 없다.
    // 덧칠할 수 있다는 조건 -> 코드상으로 넘어가게 칠한 경우를 초과된 너비만큼 이전 구역을 칠하는 것으로 간주할 수 있기 때문이다.
    // 예를 들어 m = 3, n = 3, section = [3] 일 때 코드에서는 3, 4, 5를 칠하는 것으로 계산하지만 이것은 1, 2, 3에 대응된다.
    // m(칠하는 너비) <= n(전체 구역) -> 롤러의 크기가 전체 영역보다 작거나 같다는 조건이 있기 때문에 3구역이 포함되면서 길이가 3인 경우의 수는 최소한 하나 이상 무조건 존재한다.
  // 따라서 n의 범위를 넘어가서 칠하는 경우도 기존 코드 그대로 계산하면 된다.